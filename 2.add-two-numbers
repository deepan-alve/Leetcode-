class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);  // A dummy node to build the result linked list
        ListNode current = dummyHead;          // Pointer to the current node in the result list
        int carry = 0;                         // To track the carry from sum of two digits

        // Loop through the two lists until both are null, and handle carry
        while (l1 != null || l2 != null) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;

            int sum = carry + x + y;
            carry = sum / 10;  // Carry for the next iteration
            current.next = new ListNode(sum % 10);  // Create a new node with the current digit
            current = current.next;

            // Move to the next nodes in l1 and l2 if they are not null
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }

        // If there's still a carry left after the last iteration, add it
        if (carry > 0) {
            current.next = new ListNode(carry);
        }

        return dummyHead.next;  // The first node is dummy, so return the next node
    }
}
